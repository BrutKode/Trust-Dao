{
  "language": "Solidity",
  "sources": {
    "contracts/Trust.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.8;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Trust {\n\n    uint256 pot;\n    address owner;\n    IERC20 token;\n\n    constructor(address _token) {\n        owner = msg.sender;\n        token = IERC20(_token);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Unauthorised Access!\");\n        _;\n    }\n\n    modifier requireAllowance() {\n        require(token.allowance(msg.sender, address(this)) > 0, \"Allowance Null\");\n        _;\n    }\n\n    function transferOwnership(address _newOwner) external onlyOwner {\n        owner = _newOwner;\n    }\n\n    mapping(address => uint) balances;\n    mapping(address => bool) allowances;\n    mapping(address => address) user2dev;\n\n    function totalPotSupply() external view returns (uint256) {\n        return pot;\n    }\n\n    function viewDevBalance(address _dev) external view returns (uint256) {\n        return balances[_dev];\n    }\n\n    function isClaimable(address _dev) external view returns (bool) {\n        return allowances[_dev];\n    }\n\n    function returnUserDev(address _user) external view returns (address) {\n        return user2dev[_user];\n    }\n\n    function payForWork(address _dev, uint256 amount) external requireAllowance {\n        token.transferFrom(msg.sender, address(this), amount);\n        balances[_dev] += amount;\n        pot += amount;\n        user2dev[msg.sender] = _dev;\n    }\n\n    function claim() external {\n        require(allowances[msg.sender] == true, \"Not Approved!\");\n        pot -= balances[msg.sender];\n        token.transfer(msg.sender, balances[msg.sender]);\n        balances[msg.sender] = 0;\n    }\n\n    function approveDev(address _dev) external {\n        require(_dev == user2dev[msg.sender], \"Not Assigned dev!\");\n        allowances[_dev] = true;\n    }\n\n    function half(address _dev) external {\n        require(_dev == user2dev[msg.sender], \"Dev out of bounds!\");\n        uint256 amount = balances[_dev];\n        pot -= amount;\n        token.transfer(_dev, amount/2);\n        token.transfer(msg.sender, amount/2);\n        balances[_dev] = 0;\n    }\n\n    function superFunc(address _to, address _dev, uint256 amount) external onlyOwner {\n        token.transfer(_to, amount);\n        balances[_dev] -= amount;\n        pot -= amount;\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}